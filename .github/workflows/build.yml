# This workflow will build a Java project with Maven and Docker Hub

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  AWS_REGION: us-east-2                       # set this to your preferred AWS region, e.g. us-west-1
  DOCKER_REGISTRY: docker.io                  # set this to your Amazon ECR repository name
  DOCKER_REPOSITORY: caiocf/person-api-restfull      # set this to your Amazon ECR repository name
  ECS_SERVICE: MyEcsService                 # set this to your Amazon ECS service name
  ECS_CLUSTER: MyEcsCluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: MyEcsTaskDefinition # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: MyContainerName           # set this to the name of the container in the
  # containerDefinitions section of your task definition


jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # Build FatJar with Maven
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Build with Maven
        run: mvn -B package --file pom.xml


      ## Send Image Docker HUB
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=image::$DOCKER_REPOSITORY:${GITHUB_REF#refs/heads/}"

      - name: Print
        shell: bash
        run: |
          echo ${{ steps.extract_branch.outputs.image }}

      - name: Build and Push to Docker Hub
        id: build-image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.extract_branch.outputs.image }}


      ## Send CLUSTER ECS AWS and DEPLOY
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition MyEcsTaskDefinition --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.DOCKER_REGISTRY }}/${{ steps.extract_branch.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
